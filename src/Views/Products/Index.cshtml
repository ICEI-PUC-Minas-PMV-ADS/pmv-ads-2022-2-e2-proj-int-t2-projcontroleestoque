@using Microsoft.AspNetCore.Html
@{
    var products = ViewData["products"] as Product[];
    int totalCount = (ViewData["pagination_totalCount"] as int?).GetValueOrDefault(0);
    int offset = (ViewData["pagination_offset"] as int?).GetValueOrDefault(0);
    int pageCount = (ViewData["pagination_pageCount"] as int?).GetValueOrDefault(0);

    ViewData["Title"] = "Lista de Produtos";
}

@functions
{
    IHtmlContent GenerateTooltip(string? label) {
        return Html.Raw(String.Format("data-toggle='tooltip' data-placement='top' title='{0}'", label));
    }
}

<style>
    .table-field-nome {
        max-width: 100px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .table-field-descricao {
        max-width: 100px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .table-field-quantidade {
        max-width: 60px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .table-field-localizacao {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .table-field-tags {
        max-width: 200px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .table-field-estategia-consumo {
        max-width: 50px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .table-field-criado {
        max-width: 70px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .table-field-validade {
        max-width: 70px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .c-product-row, .c-product-row > td {
        cursor: pointer;
    }
    
</style>

<div class="d-flex justify-content-between align-items-center p-2" style="background-color: #ededed; border-radius: 0.3rem; box-shadow: 0 0 1rem #aaa; margin-top: 6rem; margin-bottom: 2rem">
    <div class="me-2" style="flex-grow: 1">
        <input type="text" class="form-control" placeholder="Buscar" id="searchInput" />
    </div>

    <div class="d-flex justify-content-end ms-2">        
        <button type="button" class="btn btn-secondary" id="searchButton">Buscar Produto</button>
    </div>
</div>

<div class="p-4" style="background-color: #ededed; border-radius: 0.3rem; box-shadow: 0 0 1rem #aaa">
    <h3>Produtos</h3>
    <hr />

    @if (products != null && products.Length > 0)
    {
        <div class="table-responsive">
            <table id="products" class="table table-hover table-sm table-bordered" style="background-color: white; border-radius: 0.25rem">
                <thead>
                    <tr>
                        <th class="table-field-nome" @GenerateTooltip("Nome")>Nome</th>
                        <th class="table-field-descricao" @GenerateTooltip("Descrição")>Descrição</th>
                        <th class="table-field-quantidade" @GenerateTooltip("Quantidade")>Quantidade</th>
                        <th class="table-field-localizacao" @GenerateTooltip("Localização")>Localização</th>
                        <th class="table-field-tags" @GenerateTooltip("Tags")>Tags</th>
                        <th class="table-field-estategia-consumo" @GenerateTooltip("Estratégia")>Estratégia</th>
                        <th class="table-field-validade" @GenerateTooltip("Validade")>Validade</th>
                        <th> Movimentação </th>
                    </tr>
                </thead>
                <tbody id="products-body" class="">
                    @foreach (var p in products)
                    {
                        <tr data-product-id="@p.Id" class="c-product-row"  >
                            <td class="table-field-nome" @GenerateTooltip(p.Nome)>@p.Nome</td>
                            <td class="table-field-descricao" @GenerateTooltip(p.Descricao)>@p.Descricao</td>
                            <td class="table-field-quantidade" @GenerateTooltip(p.Quantidade.ToString())>@p.Quantidade</td>
                            <td class="table-field-localizacao" @GenerateTooltip(p.Localizacao)>@p.Localizacao</td>
                            <td class="table-field-tags" @GenerateTooltip(p.Tags)>@p.Tags</td>
                            <td class="table-field-estategia-consumo" @GenerateTooltip(p.EstrategiaConsumo)>@p.EstrategiaConsumo</td>
                            <td class="table-field-validade" @GenerateTooltip(p.Validade?.ToString("dd/MM/yyyy"))>@p.Validade?.ToString("dd/MM/yyyy")</td>
                            <td><a class="btn btn-secondary btn-sm" asp-action="MoveDetails" asp-controller="Products" asp-route-id="@p.Id"> Entrada/Saída </a> </td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td id="footer" colspan="8" style="text-align: right">
                            Exibindo <b>@(offset + 1)</b> a <b>@(Math.Min(pageCount, totalCount) + offset)</b> registros de <b>@totalCount</b> resultados
                        </td>
                    </tr>
                </tfoot>
            </table>
        </div>
    }
    else
    {
        <h4>Não foram encontrados resultados</h4>
    }
</div>

<script type="text/javascript">
    
    document.addEventListener("DOMContentLoaded", () => {
        const toSnakeCase = (str) =>
            str &&
            str
                .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)
                .map(x => x.toLowerCase())
                .join('-');

        const generateTableCell = (row, p, column) => {
            const nomeCol = document.createElement("td");
            const normalizedNameField = column.charAt(0).toLowerCase() + column.slice(1);

            nomeCol.innerText = p[normalizedNameField];
            nomeCol.className = `table-field-${toSnakeCase(column)}`;
            nomeCol.dataset.toggle = "tooltip";
            nomeCol.dataset.placement = "top";
            nomeCol.dataset.title = p[normalizedNameField];
            row.appendChild(nomeCol);

            console.log(column.charAt(0).toLowerCase() + column.slice(1));
        };

        const generateTableBody = (el, products) => {
            el.replaceChildren(...products.map((p) => {
                const row = document.createElement("tr");
                row.dataset.productId = p.id;
                row.className = "c-product-row";

                generateTableCell(row, p, "Nome");
                generateTableCell(row, p, "Descricao");
                generateTableCell(row, p, "Quantidade");
                generateTableCell(row, p, "Localizacao");
                generateTableCell(row, p, "Tags");
                generateTableCell(row, p, "EstrategiaConsumo");
                generateTableCell(row, p, "Validade");

                return row;
            }));
        };

        const updateFooter = (totalCount, offset, pageCount) => {
            const footer = document.getElementById("footer");
            footer.innerHTML = `Exibindo <b>${offset + 1}</b> a <b>${Math.min(pageCount, totalCount) + offset}</b> registros de <b>${totalCount}</b> resultados`;
        };

        const searchFunction = () => {
            let searchInput = document.getElementById("searchInput");

            if (searchInput.value !== null) {
                let action = fetch('@Url.Action("QueryProduct", "Products")?q=' + searchInput.value);

                action
                    .then(response => response.json())
                    .then(response => {
                        const { value: responseValue } = response;
                        const { totalCount, offset, pageCount } = responseValue;

                        if (responseValue.status === 200) {
                            generateTableBody(document.getElementById("products-body"), responseValue.products);
                            updateFooter(totalCount, offset, pageCount);
                        }
                    });

            }
        };

        let searchInput = document.getElementById("searchInput");

        searchInput.addEventListener("change", (evt) => searchFunction());

        let searchButton = document.getElementById("searchButton");

        searchButton.addEventListener('click', (evt) => searchFunction());
    });
</script>